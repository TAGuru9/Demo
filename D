# TLS not needed for Test-NetConnection
$retryLimit = 3
$websites = @{
    "Hea" = "my.y.com"
}

$global:PASS = 0
$global:FAIL = 0
$summary = @()
$index = 1

foreach ($websiteName in $websites.Keys) {
    $hostName = $websites[$websiteName]
    $retryAttempt = 1
    $success = $false

    while ($retryAttempt -le $retryLimit -and -not $success) {
        try {
            $result = Test-NetConnection -ComputerName $hostName -Port 443

            if ($result.TcpTestSucceeded) {
                $status = "Pass"
                $statusCode = "Connected"
                $global:PASS++
                $success = $true
            } else {
                $status = "Fail"
                $statusCode = "No Connection"
                $global:FAIL++
            }

            $websiteInfo = [pscustomobject]@{
                Number        = $index++
                WebSiteName   = $websiteName
                Status        = $status
                Url           = "https://$hostName"
                StatusCode    = $statusCode
                RetryAttempt  = $retryAttempt
            }

            $summary += $websiteInfo
        }
        catch {
            $websiteInfo = [pscustomobject]@{
                Number        = $index++
                WebSiteName   = $websiteName
                Status        = "Fail"
                Url           = "https://$hostName"
                StatusCode    = "Error"
                RetryAttempt  = $retryAttempt
            }

            $summary += $websiteInfo
            $global:FAIL++
        }

        $retryAttempt++
    }
}

# Summary table
$summaryTable = $summary | Sort-Object Status | Group-Object Status | ForEach-Object {
    [pscustomobject]@{
        Status = $_.Name
        Count  = $_.Count
    }
}

# Display test results
Write-Host "`n************** Test Results **************" -ForegroundColor Cyan
$summary | Format-Table -AutoSize

# Display summary
Write-Host "`n************** Summary **************" -ForegroundColor Cyan
$summaryTable | Format-Table -AutoSize

# Determine and display overall status
$overallStatus = if ($summary | Where-Object { $_.Status -eq "Fail" }) { "Fail" } else { "Pass" }
Write-Host "`nOverall Automation Status: $overallStatus" -ForegroundColor Green
