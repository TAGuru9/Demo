# === USER CONFIGURATION ===
$jenkinsUrl = "http://your-jenkins-url"   # No trailing slash
$agentName = "your-agent-name"
$user = "your-username"
$token = "your-api-token"
$agentJarPath = "C:\jenkins\agent.jar"
$workDir = "C:\jenkins"
$logFile = "C:\jenkins\agent-monitor.log"
$jnlpUrl = "$jenkinsUrl/computer/$agentName/slave-agent.jnlp"
$secret = "your-agent-secret"  # Get this from the agent config page

# === MONITORING LOOP ===
while ($true) {
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $authHeader = @{
        Authorization = ("Basic " + [System.Convert]::ToBase64String(
            [System.Text.Encoding]::ASCII.GetBytes("$($user):$($token)"))
        )
    }

    try {
        $apiUrl = "$jenkinsUrl/computer/$agentName/api/json"
        $response = Invoke-RestMethod -Uri $apiUrl -Headers $authHeader

        if ($response.offline -eq $false) {
            "$timestamp : Agent is CONNECTED ✅" | Tee-Object -FilePath $logFile -Append
        } else {
            "$timestamp : Agent is OFFLINE ❌ - Restarting..." | Tee-Object -FilePath $logFile -Append

            # Start the Jenkins agent
            Start-Process -FilePath "java" -ArgumentList @(
                "-jar", "`"$agentJarPath`"",
                "-jnlpUrl", "`"$jnlpUrl`"",
                "-secret", "$secret",
                "-workDir", "`"$workDir`""
            ) -NoNewWindow

            "$timestamp : Agent restart command issued." | Tee-Object -FilePath $logFile -Append
        }
    } catch {
        "$timestamp : Error connecting to Jenkins - $_" | Tee-Object -FilePath $logFile -Append
    }

    Start-Sleep -Seconds 15
}
